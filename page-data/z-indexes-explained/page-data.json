{"componentChunkName":"component---src-templates-blog-post-js","path":"/z-indexes-explained/","webpackCompilationHash":"c5e926c62437d9815d94","result":{"data":{"site":{"siteMetadata":{"title":"Jeremy Abroad","author":"Jeremy Bernier"}},"markdownRemark":{"id":"b05915bd-9252-53e2-a8fd-5c556e610806","excerpt":"Z-Index is one of the most confusing and unintuitive properties in CSS, but it’s actually pretty simple once you understand it.Your first…","html":"<p>Z-Index is one of the most confusing and unintuitive properties in CSS, but it’s actually pretty simple once you understand it.</p>\n<p>Your first instinct is probably to think that you can just set z-index on any element and that that alone is going to determine its stacking order. This is WRONG.</p>\n<p>First of all: <strong>z-index only applies to positioned elements.</strong></p>\n<p>A positioned element is an element who’s <code class=\"language-text\">position</code> property is NOT <code class=\"language-text\">static</code> (eg. <code class=\"language-text\">relative</code>, <code class=\"language-text\">absolute</code>, <code class=\"language-text\">fixed</code>). Setting a z-index on an unpositioned element does nothing.</p>\n<h3>If a positioned element has a z-index of X, then all of its children will also be stuck with a z-value of X</h3>\n<p>You can change the z-index of any child elements all you want, but that won’t do anything!</p>\n<p><em>(Note: z-value is not an actual CSS term. I only use it because z-index technically defaults to “auto” and can be set to whatever you want, even if it does nothing)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=&quot;parent&quot; style=&quot;position: relative; z-index: 6;&quot;&gt;\n  &lt;div id=&quot;child&quot; style=&quot;position: relative: z-index: 7;&quot;&gt;\n    &lt;div id=&quot;grandchild&quot; style=&quot;position: relative; z-index: 9;&quot; &gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre></div>\n<p>The z-value of each of these elements is 6, and there’s no way to change that without modifying the z-index of #parent.</p>\n<p>In technical terms, <strong>a stacking context is formed when a positioned element has a z-index.</strong> A stacking context is a single atomic unit composed of a parent along with its children. All elements within a stacking context are bound to the z-value set by the non-root parent (in this case #parent).</p>\n<p><em>(Non-root just means that it’s not the <code class=\"language-text\">&lt;html&gt;</code> tag. The root <code class=\"language-text\">&lt;html&gt;</code> tag technically forms a stacking context, but any z-index on it is meaningless.)</em></p>\n<p>So you can create stacking contexts within stacking contexts, but all child stacking contexts will be bound to the z-value of the outermost (non-root) stacking context.</p>\n<p>In the example above, three stacking contexts are formed, and they’re nested. The z-value of all three contexts is bound to the z-index of #parent, which is 6.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Stacking Contexts:\n#parent (z-value: 6)\n  #child\n    #grandchild</code></pre></div>\n<hr>\n<p>Turns out that setting the z-index on a positioned element is only one of many ways to create a stacking context. <strong>There are various CSS properties that automatically create a stacking context on an element, regardless of whether or not a z-index is set.</strong></p>\n<p>The full list is <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\">here</a>, but here are some common properties that automatically create new stacking contexts:</p>\n<ul>\n<li><code class=\"language-text\">position: fixed</code></li>\n<li>elements with a <code class=\"language-text\">transform</code> value other than “none”</li>\n<li>elements with an <code class=\"language-text\">opacity</code> value less than 1.</li>\n</ul>\n<p>So any element with <code class=\"language-text\">position: fixed</code> or <code class=\"language-text\">transform: translateY(50%)</code> is going to form a new stacking context regardless of whether a z-index has been set on that element.</p>\n<p>Some implications of this:</p>\n<ul>\n<li>If you must use fixed positioning, make the element as shallow as possible so that it doesn’t accidentally get thrown under another stacking context and bound to that element’s z-index.</li>\n<li>Avoid using <code class=\"language-text\">transform</code> to center containers/wrappers if possible (commonly used for vertically centering). The entire container will be bound to the same stacking context, and thus you won’t be able to individually modify the z-index values of any of its children.</li>\n<li>Use <code class=\"language-text\">background-color</code> with an <code class=\"language-text\">rgba()</code> value instead of <code class=\"language-text\">opacity</code>. This avoids the creation of a stacking context.</li>\n</ul>\n<hr>\n<p>If any of this didn’t make sense, just read <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\">MDN’s guide</a>. It’s pretty good.</p>\n<p>Now that you understand z-indexes and stacking contexts, you know something 95% of developers forced to write CSS don’t know, and will no longer have to suffer through migraines figuring out why that z-index isn’t working.</p>\n<p><em>(Here’s a link to this article on <a href=\"https://medium.com/@jberniertech/z-indexes-in-css-explained-32f52cb3fab\">Medium</a>)</em></p>","frontmatter":{"title":"Z-Indexes in CSS Explained","date":"March 17, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/z-indexes-explained/","previous":{"fields":{"slug":"/webpack-2-and-tree-shaking-results/"},"frontmatter":{"title":"Upgrading to Webpack 2, and Tree-Shaking Results","tags":["tech"]}},"next":{"fields":{"slug":"/arms-race/"},"frontmatter":{"title":"The Arms Race to the Bottom","tags":["politics"]}}}}}